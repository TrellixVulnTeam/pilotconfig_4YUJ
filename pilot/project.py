import os
from .Sbc import Sbc
from .PilotDriver import PilotDriver
from .PilotServer import PilotServer

from colorama import Fore

def arguments(parser):
  # parser.add_argument('--terminal', '-t', action='store_true', help='forces the terminal version instead of GUI')
  pass


def main(args):
  print('This will create a new Pilot firmware project in the current folder')

  node_host = args.host
  node_user = args.user
  node_password = args.password

  if not args.host:
    print('We need a hostname or IP and username/password (ssh) of the Node you want to configure.')
    node_host = input('Host/IP of Node to get Firmware Configuration from: ')
    node_user = input('Username (pi): ')
    node_password = input('Password (raspberry): ')

    args.host = node_host
    args.user = node_user if node_user != '' else args.user
    args.password = node_password if node_password != '' else args.password
    
  with Sbc(args) as sbc:
    pilotserver = PilotServer(sbc)
    pilotdriver = PilotDriver(pilotserver, sbc)

    if args.server != None:
      pilotserver.pilot_server = args.server

    modules = pilotdriver.load_pilot_defs()
    if modules != None:
      for module in modules:
        print('Module {}: {}{}'.format(
            module['module'], Fore.GREEN, module['currentfid_nicename']))

    if pilotdriver.get_firmware(False, os.path.join(args.workdir, 'basefw') if args.workdir else './basefw', True) != 0:
      print('Could not download firmware source!')
      exit(1)
  
  print(args.host)

  print("Project generated:")
  print( """{}
  ├─ src/
  │  ├─ program.st /* IEC 61131-3 code */
  │  └─ *.c, *.h   /* custom C code compiled into firmware image */
  ├─ config.json   /* firmware configuration (memory mapping, module configuration, etc.) */
  └─ basefw/       /* firmware base code folder, generated by 'make basefw' */""".format(args.workdir if args.workdir else os.getcwd()))

