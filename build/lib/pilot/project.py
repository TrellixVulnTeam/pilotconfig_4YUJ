import os
import distutils
import json
import yaml
from .Sbc import Sbc
from .PilotDriver import PilotDriver
from .PilotServer import PilotServer

from colorama import Fore

def main(args):
  print('This will create a new Pilot firmware project in the current folder')

  node_host = args.host
  node_user = args.user
  node_password = args.password

  if not args.host:
    print('We need a hostname or IP and username/password (ssh) of the Node you want to configure.')
    node_host = input('Host/IP of Node to get Firmware Configuration from: ')
    node_user = input('Username (pi): ')
    node_password = input('Password (raspberry): ')

    args.host = node_host
    args.user = node_user if node_user != '' else args.user
    args.password = node_password if node_password != '' else args.password
    
  with Sbc(args) as sbc:
    pilotserver = PilotServer(sbc)
    pilotdriver = PilotDriver(pilotserver, sbc)

    if args.server != None:
      pilotserver.pilot_server = args.server

    modules = pilotdriver.load_pilot_defs()
    if modules != None:
      for module in modules:
        print('Module {}: {}{}'.format(
            module['module'], Fore.GREEN, module['currentfid_nicename']))

    if pilotdriver.get_firmware(False, os.path.join(args.workdir, 'basefw') if args.workdir else './basefw', True) != 0:
      print(Fore.RED + 'Could not download firmware source!')
      exit(1)

    # create credentials.json
    cred = {}
    try:
      nodeconf = yaml.load(sbc.getFileContent('/etc/pilot/pilotnode.yml'))
      node = {}
      node['nodeid'] = nodeconf['nodeid']
      node['apikey'] = nodeconf['apikey']
      node['host'] = node_host
      node['user'] = node_user
      node['password'] = node_password
      cred['nodes'] = [node]
    except:
      print(Fore.RED + 'WARNING: Could not load Node Configuration (pilotnode not configured on target?). Continuing without it.')

    with open(os.path.join(args.workdir, 'credentials.json') if args.workdir else './credentials.json', 'w') as credfile:
      json.dump(cred, credfile)

    # create config.json
    config = {}
    config['modules'] = []

    for mod in modules:
      if mod['currentfid']:
        module = {}
        module['slot'] = mod['module']
        module['fid'] = mod['currentfid']
        # TODO: move to plugin
        if module['fid'] == 'io16':
          module['config'] = { 'direction': {'0_3': 'in', '4_7': 'in', '8_11': 'in', '12_15': 'in'} }
        config['modules'].append(module)

    with open(os.path.join(args.workdir, 'config.json') if args.workdir else './config.json', 'w') as configfile:
      json.dump(config, configfile)

    # copy default project files
    targetpath = os.path.join(args.workdir, 'src') if args.workdir else './src'
    distutils.dir_util.copy_tree(os.path.join(os.path.dirname(os.path.realpath(__file__)), 'project', 'default'), targetpath)

  print("Project generated:")
  print( """{}
  ├─ src/
  │  ├─ program.st    /* IEC 61131-3 code */
  │  └─ *.c, *.h      /* custom C code compiled into firmware image */
  ├─ config.json      /* firmware configuration (memory mapping, module configuration, etc.) */
  ├─ credentials.json /* authentication credentials (sensitive data) */
  └─ basefw/          /* firmware base code folder, generated by 'make basefw' */""".format(args.workdir if args.workdir else os.getcwd()))

